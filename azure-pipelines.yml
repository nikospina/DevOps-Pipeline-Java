trigger:
- develop
- release/*

variables:
  buildConfiguration: 'Release'
  
stages:
- stage: 'Build'
  displayName: 'Continuous Itegration'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
    variables:
      wwwrootDir: 'wwwroot'
      
    steps:
    - script: echo build
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        options: '-Dmaven.test.skip=true'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
        
  - job: 'RunUnitTest'
    displayName: 'Unit Test & Coverage Job'    
    steps:
    - script: echo unit test
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'test'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'Cobertura'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
  
  - job: 'SonarQubeScanner'
    displayName: 'SonarQube Scanner'
    steps:
      - script: echo SonarQube Scanner
      - task: SonarQubePrepare@4
        inputs:
          SonarQube: 'SonarQube'
          scannerMode: 'Other'
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: false
          javaHomeOption: 'JDKVersion'
          mavenVersionOption: 'Default'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: true
          sqMavenPluginVersionChoice: 'latest'
        
- stage: 'DeployDev'
  displayName: 'Deploy Dev'
  jobs: 
  - deployment: 'DeployDev'
    displayName: 'Deploy Dev'
    environment: 'Desarrollo'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      eq(variables['Build.SourceBranchName'], 'develop')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Develop environment

- stage: 'DeployQa'
  displayName: 'Deploy Qa'
  jobs: 
  - deployment: 'DeployQa'
    displayName: 'Deploy Qa Env'
    environment: 'Calidad'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Qa environment

- stage: 'FunctionalTest'
  displayName: 'Functional Testing'
  condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
  jobs:
  - job: 'RunFunctionalTest'
    displayName: 'Functional test & verify Quality Gates'    
    steps:
    - script: echo functional test
    - script: echo Verify Quality Gates

- stage: 'DeployPrd'
  displayName: 'Deploy Prd'
  jobs:
  - deployment: 'DeployPrd'
    displayName: 'Deploy Prd Env Job'
    environment: 'Produccion'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Prd environment

- stage: 'UpdateRepo'
  displayName: 'Update Repo'
  jobs:
  - job: 'MergeReleaseInMaster'
    displayName: 'Merge release in master'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    steps:
    - checkout: self
      persistCredentials: true
    - task: CmdLine@2
      displayName: 'Merge to master'
      inputs:
        script: |
          git config --global user.email "nikospina9611@gmail.com"
          git config --global user.name "nikospina"
          git fetch
          git checkout main
          git merge --squash origin/release/$(Build.SourceBranchName)
          git commit -m 'Squash Merge release $(Build.SourceBranchName)'
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git
          git tag $(Build.SourceBranchName) -m 'Tag by Azure Pipeline' 
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git --tags
          
  - job: 'MergeReleaseInDevelop'
    displayName: 'Merge release in develop'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )    
    steps:
    - checkout: self
      persistCredentials: true
    - task: CmdLine@2
      displayName: 'Merge to develop'
      inputs:
        script: |
          git config --global user.email "nikospina9611@gmail.com"
          git config --global user.name "nikospina"
          git fetch
          git checkout develop
          git merge --squash origin/release/$(Build.SourceBranchName)
          git commit -m 'Squash Merge release $(Build.SourceBranchName)'
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git
