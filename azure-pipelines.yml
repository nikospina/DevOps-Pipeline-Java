trigger:
- develop
- release/*

variables:
  buildConfiguration: 'Release'
  
stages:
- stage: 'Build'
  displayName: 'Continuous Itegration'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-16.04'
      demands:
       - npm
    variables:
      wwwrootDir: 'wwwroot'
      
    steps:
    - script: echo build
        
  - job: 'RunUnitTest'
    displayName: 'Unit Test & Coverage Job'    
    steps:
    - script: echo unit test
    - task: NodeTool@0 
      inputs:
        versionSpec: 12.x
    - script: npm install
    - script: npm test
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: JUnit
        testResultsFiles: '**/test-results.xml'
  
  - job: 'SonarQubeScanner'
    displayName: 'SonarQube Scanner'
    steps:
      - script: echo SonarQube Scanner
      - script: |
          curl https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.5.0.2216.zip --output sonarInstall.zip
          unzip sonarInstall.zip
        displayName: Install Sonar Scanner
      - task: NodeTool@0 
        inputs:
         versionSpec: 12.x
      - script: npm install
      - script: npm test
      - script: |
          ./sonar-scanner-4.5.0.2216/bin/sonar-scanner -Dsonar.projectKey=Test-DevOps -Dsonar.sources=. -Dsonar.host.url=http://54.92.154.189:9000 -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info -Dsonar.exclusions=node_modules/**,coverage/**,.nyc_output/**,test/**,test-results.xml -Dsonar.login=db2c19be53af58f692f2ae2827fbbadab8e1a058
        displayName: Sonar Scanner Run
        
- stage: 'DeployDev'
  displayName: 'Deploy Dev'
  jobs: 
  - deployment: 'DeployDev'
    displayName: 'Deploy Dev'
    environment: 'Desarrollo'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      eq(variables['Build.SourceBranchName'], 'develop')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Develop environment

- stage: 'DeployQa'
  displayName: 'Deploy Qa'
  jobs: 
  - deployment: 'DeployQa'
    displayName: 'Deploy Qa Env'
    environment: 'Calidad'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Qa environment

- stage: 'FunctionalTest'
  displayName: 'Functional Testing'
  condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
  jobs:
  - job: 'RunFunctionalTest'
    displayName: 'Functional test & verify Quality Gates'    
    steps:
    - script: echo functional test
    - script: echo Verify Quality Gates

- stage: 'DeployPrd'
  displayName: 'Deploy Prd'
  jobs:
  - deployment: 'DeployPrd'
    displayName: 'Deploy Prd Env Job'
    environment: 'Produccion'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo Deploy in Prd environment

- stage: 'UpdateRepo'
  displayName: 'Update Repo'
  jobs:
  - job: 'MergeReleaseInMaster'
    displayName: 'Merge release in master'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )
    steps:
    - checkout: self
      persistCredentials: true
    - task: CmdLine@2
      displayName: 'Merge to master'
      inputs:
        script: |
          git config --global user.email "nikospina9611@gmail.com"
          git config --global user.name "nikospina"
          git fetch
          git checkout main
          git merge --squash origin/release/$(Build.SourceBranchName)
          git commit -m 'Squash Merge release $(Build.SourceBranchName)'
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git
          git tag $(Build.SourceBranchName) -m 'Tag by Azure Pipeline' 
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git --tags
          
  - job: 'MergeReleaseInDevelop'
    displayName: 'Merge release in develop'
    condition: |
      and(
      succeeded(),
      ne(variables['Build.Reason'], 'PullRequest'),
      startsWith(variables['Build.SourceBranch'], 'refs/heads/release')
      )    
    steps:
    - checkout: self
      persistCredentials: true
    - task: CmdLine@2
      displayName: 'Merge to develop'
      inputs:
        script: |
          git config --global user.email "nikospina9611@gmail.com"
          git config --global user.name "nikospina"
          git fetch
          git checkout develop
          git merge --squash origin/release/$(Build.SourceBranchName)
          git commit -m 'Squash Merge release $(Build.SourceBranchName)'
          git push https://$(gitUser):$(gitPass)@github.com/nikospina/DevOps-Pipeline.git
